*
 * Project1.cpp
 *
 * Name: Mahek Kakkar
 * EE312 Summer 2020
 * SuperStrings
 */

#include <stdio.h> // provides declarations for printf and putchar
#include <stdint.h> // provides declarations for int32_t uint32_t and the other (new) standard C types
//#include <string.h>
/*
All of your code must be in this file. Please no #includes other than standard system headers (ie.., stdio.h, stdint.h)

You must write this function (printSuperStrings). Do not change the way the function is declared (i.e., it has
exactly two parameters, each parameter is a standard (mundane) C string (see Instruction).
*/



//why a greyed out
//compare function

char NewStringArray[1000][1000];
char NewSupStringArray[1000][1000];


int stringLen(char* array){
    //int a = 0;
    int length = 0;

    for(int a = 0; array[a] != '\0'; a++){
        length++;
        //a++;
    }
    return length;
}

void StringArray(char stringArray []) {  //add new line and tab
    int a = 0; //letter in array (columns) counter
    int b = 0; //letter in new array
    int word = 0; //word counter (rows)

    while (a < stringLen(stringArray)) { //CHANGE!!!
        // inc letters in string
        if (stringArray[a] == ' ') {
            NewStringArray[word][a] = 0; //?
            b = 0; //resets letter
            word++; //increments the count
            //make new array
            //inc rows and reset columns
        } else if (stringArray[a] == 0) {
            NewStringArray[word][a] = 0;
            b = 0;
            word++;
        } else if ( stringArray[a] == '\n') {
            NewStringArray[word][a] = 0;
            b = 0;
            word++;
        }else if ( stringArray[a] == '\t'){ //
            NewStringArray[word][a] = 0;
            b = 0;
            word++;
            // currently found the end of a word
        } else {
            //letter
            //while( stringArray[b != "\0")
                    NewStringArray[word][b] = stringArray[a];//increment letters
                    b++;
        }
        a++; //increment letters

    }

}
void SuperStringArray( char superStringArray[]) {
    int a = 0; //letter in array (columns) counter
    int b = 0; //letter in new array
    int word = 0; //word counter (rows)

    while (a < stringLen(superStringArray)) { //do while string length is less than array
        a++; // inc letters in string
        if (superStringArray[a] == ' ') {
            NewSupStringArray[word][a] = 0;
            b = 0; //resets letter
            word++; //increments the count
            //make new array
            //inc rows and reset colums
        } else if (superStringArray[a] = 0) {
            NewSupStringArray[word][a] = 0;
            b = 0;
            word++;
        } else if ( superStringArray[a] == '\n') {
            NewStringArray[word][a] = 0;
            b= 0;
            word++;
        }else if ( superStringArray[a] == '\t'){ //
            NewStringArray[word][a] = 0;
            b = 0;
            word++;
            // currently found the end of a word
        } else {
            //letter
            //while( stringArray[b != "\0")
            NewStringArray[word][b] = superStringArray[a];//increment letters
            b++;
        }
        a++; //increment letters

    }

}



void compareStrings(  );

//new array for matches
// 2 for loops to check if match
// if same inc both and if different inc superstring

//outer string , inner super string
//how to compare string with all of superstring words and then move on to next string word


void printSuperStrings(char targets [], char candidates []) {
 StringArray(targets);

}


